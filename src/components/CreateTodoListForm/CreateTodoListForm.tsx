import {FC, useState} from 'react';

import {useBem} from '@/hooks/useBem';
import useScreenSize from '@/hooks/useScreenSize';
import {ModalStore} from '@/store/ModalStore';
import {TodoStore} from '@/store/TodoStore';
import {CreateTodoListData} from '@/typings/todo';

import {Button} from '../Button/Button';

import './create-todo-list-form.scss';

interface CreateTodoListFormProps {
	className?: string;
	onSuccess: () => void;
	onCancel: () => void;
}

export const CreateTodoListForm: FC<CreateTodoListFormProps> = ({className, onSuccess, onCancel}) => {
	const [block, element] = useBem('create-todo-list-form', className);
	const {isScreenMobile} = useScreenSize();

	const [formData, setFormData] = useState<CreateTodoListData>({
		title: '',
		description: '',
		color: '#3a89d8',
		icon: 'üìã',
		templateCategory: '',
	});

	const [isSubmitting, setIsSubmitting] = useState(false);

	const handleInputChange = (field: keyof CreateTodoListData, value: string) => {
		setFormData((prev) => ({...prev, [field]: value}));
	};

	const closeModal = () => {
		ModalStore.setIsOpen(false);
	};

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		setIsSubmitting(true);

		try {
			await TodoStore.createTodoList(formData);
			onSuccess?.();
			closeModal();
		} catch (error) {
			// –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ TodoStore
		} finally {
			setIsSubmitting(false);
		}
	};

	const colorOptions = [
		{value: '#3a89d8', label: '–°–∏–Ω–∏–π'},
		{value: '#10b981', label: '–ó–µ–ª–µ–Ω—ã–π'},
		{value: '#f59e0b', label: '–ñ–µ–ª—Ç—ã–π'},
		{value: '#ef4444', label: '–ö—Ä–∞—Å–Ω—ã–π'},
		{value: '#8b5cf6', label: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'},
		{value: '#06b6d4', label: '–ì–æ–ª—É–±–æ–π'},
		{value: '#f97316', label: '–û—Ä–∞–Ω–∂–µ–≤—ã–π'},
		{value: '#84cc16', label: '–õ–∞–π–º'},
	];

	const iconOptions = ['üìã', 'üìù', '‚úÖ', 'üìå', 'üéØ', 'üöÄ', 'üíº', 'üè†', 'üõí', '‚úàÔ∏è', 'üí™', 'üìö', 'üéµ', 'üé®', 'üîß', '‚≠ê'];

	return (
		<form onSubmit={handleSubmit} className={block()}>
			<div className={element('field')}>
				<label htmlFor="list-title" className={element('label')}>
					–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ <span className={element('required')}>*</span>
					<input
						id="list-title"
						type="text"
						className={element('input')}
						value={formData.title}
						onChange={(e) => handleInputChange('title', e.target.value)}
						placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞"
						required
					/>
				</label>
			</div>

			<div className={element('field')}>
				<label htmlFor="list-description" className={element('label')}>
					–û–ø–∏—Å–∞–Ω–∏–µ
					<textarea
						id="list-description"
						className={element('textarea')}
						value={formData.description}
						onChange={(e) => handleInputChange('description', e.target.value)}
						placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"
						rows={3}
					/>
				</label>
			</div>

			<div className={element('row')}>
				<div className={element('field', {half: true})}>
					<fieldset>
						<legend className={element('label')} id="color-legend">
							–¶–≤–µ—Ç
						</legend>
						<div className={element('color-grid')} role="radiogroup" aria-labelledby="color-legend">
							{colorOptions.map((color) => (
								<button
									key={color.value}
									type="button"
									className={element('color-option', {
										active: formData.color === color.value,
									})}
									style={{backgroundColor: color.value}}
									onClick={() => handleInputChange('color', color.value)}
									aria-label={`–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç ${color.label}`}
									role="radio"
									aria-checked={formData.color === color.value}
								/>
							))}
						</div>
					</fieldset>
				</div>

				<div className={element('field', {half: true})}>
					<fieldset>
						<legend className={element('label')} id="icon-legend">
							–ò–∫–æ–Ω–∫–∞
						</legend>
						<div className={element('icon-grid')} role="radiogroup" aria-labelledby="icon-legend">
							{iconOptions.map((icon) => (
								<button
									key={icon}
									type="button"
									className={element('icon-option', {
										active: formData.icon === icon,
									})}
									onClick={() => handleInputChange('icon', icon)}
									aria-label={`–í—ã–±—Ä–∞—Ç—å –∏–∫–æ–Ω–∫—É ${icon}`}
									role="radio"
									aria-checked={formData.icon === icon}
								>
									{icon}
								</button>
							))}
						</div>
					</fieldset>
				</div>
			</div>

			<div className={element('field')}>
				<label htmlFor="list-template-category" className={element('label')}>
					–ö–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞
					<select
						id="list-template-category"
						className={element('select')}
						value={formData.templateCategory}
						onChange={(e) => handleInputChange('templateCategory', e.target.value)}
					>
						<option value="">–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω</option>
						<option value="work">–†–∞–±–æ—Ç–∞</option>
						<option value="personal">–õ–∏—á–Ω–æ–µ</option>
						<option value="shopping">–ü–æ–∫—É–ø–∫–∏</option>
						<option value="travel">–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</option>
						<option value="health">–ó–¥–æ—Ä–æ–≤—å–µ</option>
						<option value="learning">–û–±—É—á–µ–Ω–∏–µ</option>
						<option value="other">–î—Ä—É–≥–æ–µ</option>
					</select>
				</label>
			</div>

			<div className={element('actions')}>
				<Button
					type="button"
					onClick={onCancel}
					theme="blue-light"
					size={isScreenMobile ? 'medium' : undefined}
					disabled={isSubmitting}
				>
					–û—Ç–º–µ–Ω–∞
				</Button>
				<Button
					typeBtn="submit"
					theme="blue"
					size={isScreenMobile ? 'medium' : undefined}
					disabled={isSubmitting || !formData.title.trim()}
				>
					{isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫'}
				</Button>
			</div>
		</form>
	);
};
