import {FC, useEffect, useState} from 'react';

import {Button} from '@/components/Button/Button';
import {FieldInput} from '@/components/FieldInput/FieldInput';
import {Loader} from '@/components/Loader/Loader';
import {Svg} from '@/components/Svg/Svg';
import {useBem} from '@/hooks/useBem';
import {NotificationStore} from '@/store/NotificationStore';
import {IComplexity, IGoal} from '@/typings/goal';
import {GET, getFantLabWorkDetails} from '@/utils/fetch/requests';
import {selectComplexity} from '@/utils/values/complexity';

import Select from '../Select/Select';

import './external-goal-search.scss';

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const SupportedCategories = ['books', 'cinema-art', 'gaming'];

interface ExternalGoalResult {
	apiSource: string;
	externalId: string | number;
	title: string;
	description?: string;
	imageUrl?: string;
	type: 'cinema-art' | 'book' | 'travel' | 'gaming' | 'existing_goal';
	releaseDate?: string;
	authors?: string[];
	address?: string;
	popularity?: number;
	isOwnDatabase?: boolean; // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ë–î
	matchPercentage?: number; // –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	match_percentage?: number; // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
	goalCode?: string; // –ö–æ–¥ —Ü–µ–ª–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π
	source?: string;
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ API
	additionalFields?: {
		// –ü–æ–ª—è –¥–ª—è –∏–≥—Ä
		platforms?: string[];
		rating?: number;
		metacritic?: number;
		released?: string;
		genres?: string[];
		developers?: string[];

		// –ü–æ–ª—è –¥–ª—è –∫–Ω–∏–≥
		authors?: string[];
		publishedDate?: string;

		// –ü–æ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
		contentType?: string;
		ratingKp?: number;
		ratingImdb?: number;
		year?: number;
		countries?: string[];
	};
}

interface ExternalGoalSearchProps {
	onGoalSelected: (goalData: Partial<IGoal> & {imageUrl?: string; external_id?: string | number; externalType?: string}) => void;
	className?: string;
	category?: string | undefined;
	initialQuery?: string; // –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
}

export const ExternalGoalSearch: FC<ExternalGoalSearchProps> = ({onGoalSelected, className, category, initialQuery}) => {
	const [block, element] = useBem('external-goal-search', className);
	const [query, setQuery] = useState(initialQuery || '');
	const [results, setResults] = useState<ExternalGoalResult[]>([]);
	const [loading, setLoading] = useState(false);
	const [activeComplexity, setActiveComplexity] = useState<number>(1); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–∏–Ω–¥–µ–∫—Å 1)
	const [searchWasPerformed, setSearchWasPerformed] = useState(false);
	const [imageLoading, setImageLoading] = useState<Record<string, boolean>>({});

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
	const isSearchButtonDisabled = loading || query.length < 2;

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ü–µ–ª–µ–π
	const searchExternalGoals = async () => {
		if (query.length < 2) {
			setResults([]);
			setSearchWasPerformed(false);
			return;
		}

		setLoading(true);
		setSearchWasPerformed(true);
		try {
			const response = await GET('goals/search-external', {
				get: {category, query},
			});

			if (response.success && response.data.results) {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
				const {ownResults = [], externalResults = []} = response.data.results;

				// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ —Å–≤–æ–∏, –ø–æ—Ç–æ–º –≤–Ω–µ—à–Ω–∏–µ
				const combinedResults = [
					...ownResults.map((result: any) => ({...result, isOwnDatabase: true})),
					...externalResults.map((result: any) => ({...result, isOwnDatabase: false})),
				];

				setResults(combinedResults);
			} else {
				NotificationStore.addNotification({
					type: 'error',
					title: '–û—à–∏–±–∫–∞',
					message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–µ–ª–∏',
				});
				setResults([]);
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
			NotificationStore.addNotification({
				type: 'error',
				title: '–û—à–∏–±–∫–∞',
				message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ',
			});
			setResults([]);
		} finally {
			setLoading(false);
		}
	};

	// –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	useEffect(() => {
		setImageLoading({});
	}, [results]);

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ initialQuery
	useEffect(() => {
		if (initialQuery && initialQuery.length >= 2) {
			searchExternalGoals();
		}
	}, [initialQuery]);

	// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
	if (!category || !SupportedCategories.includes(category)) {
		return null;
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	const handleQueryChange = (value: string) => {
		setQuery(value);
		if (value.length === 0) {
			setResults([]);
			setSearchWasPerformed(false);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	const handleImageLoad = (id: string) => {
		setImageLoading((prev) => ({...prev, [id]: false}));
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	const handleImageError = (id: string) => {
		setImageLoading((prev) => ({...prev, [id]: false}));
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ - —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–∏–≥
	const handleSelectGoal = async (goalData: ExternalGoalResult) => {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
		setImageLoading((prev) => ({...prev, [String(goalData.externalId)]: true}));

		try {
			let enhancedGoalData = goalData;
			console.log('üîç Initial goalData:', goalData);

			// –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–∏–≥–∞ –∏–∑ FantLab, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
			if (goalData.type === 'book' && goalData.apiSource === 'fantlab' && !goalData.isOwnDatabase) {
				console.log('üìö Loading FantLab details for book ID:', goalData.externalId);

				try {
					const detailsResponse = await getFantLabWorkDetails(String(goalData.externalId));
					console.log('üìñ FantLab details response:', detailsResponse);

					if (detailsResponse.success) {
						// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—É—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
						const details = detailsResponse.data?.data || detailsResponse.data;
						console.log('‚úÖ FantLab details data (corrected):', details);
						console.log('üìù Details description:', details.description);
						console.log('üñºÔ∏è Details imageUrl:', details.imageUrl);

						// –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
						enhancedGoalData = {
							...goalData,
							title: details.title || goalData.title,
							description: details.description || goalData.description,
							imageUrl: details.imageUrl || goalData.imageUrl,
							authors: details.authors || goalData.authors,
							additionalFields: {
								...goalData.additionalFields,
								...details.additionalFields,
							},
						};

						console.log('üîß Enhanced goal data:', enhancedGoalData);

						NotificationStore.addNotification({
							type: 'success',
							title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
							message: '–ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏',
						});
					} else {
						console.log('‚ùå FantLab details failed:', detailsResponse.error);
						NotificationStore.addNotification({
							type: 'warning',
							title: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
							message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
						});
					}
				} catch (error) {
					console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
					NotificationStore.addNotification({
						type: 'warning',
						title: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
						message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
					});
				}
			} else {
				console.log(
					'‚è≠Ô∏è Skipping FantLab details loading. Type:',
					goalData.type,
					'API:',
					goalData.apiSource,
					'Own DB:',
					goalData.isOwnDatabase
				);
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è IGoal
			const goalInfo: Partial<IGoal> & {
				imageUrl?: string;
				external_id?: string | number;
				externalType?: string;
				deadline?: string;
				isExistingGoal?: boolean;
				status?: string;
			} = {
				title: enhancedGoalData.title,
				description: enhancedGoalData.description || `–¶–µ–ª—å: ${enhancedGoalData.title}`,
				external_id: enhancedGoalData.externalId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
				externalType: enhancedGoalData.type, // –¢–∏–ø –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
				complexity: selectComplexity[activeComplexity].value as IComplexity,
				// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
				imageUrl: enhancedGoalData.imageUrl,
				// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
				estimatedTime: '',
				// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
				deadline: '',
				status: enhancedGoalData.source,
				// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
				additionalFields: enhancedGoalData.additionalFields,
			};

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ API –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
			if (enhancedGoalData.additionalFields) {
				const fields = enhancedGoalData.additionalFields;

				// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
				Object.keys(fields).forEach((key) => {
					const value = fields[key as keyof typeof fields];
					if (value !== undefined && value !== null) {
						// –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–µ additionalFields
						if (key !== 'additionalFields') {
							(goalInfo as any)[key] = value;
						}
					}
				});
			}

			// –ï—Å–ª–∏ —Ü–µ–ª—å –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
			if (enhancedGoalData.isOwnDatabase) {
				goalInfo.id = Number(enhancedGoalData.externalId);
				goalInfo.code = enhancedGoalData.goalCode;
				goalInfo.isExistingGoal = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª—å
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
			if (enhancedGoalData.imageUrl) {
				goalInfo.imageUrl = enhancedGoalData.imageUrl;
			} else {
				NotificationStore.addNotification({
					type: 'warning',
					title: '–í–Ω–∏–º–∞–Ω–∏–µ',
					message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.',
				});
			}

			// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
			onGoalSelected(goalInfo);

			// –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
			setResults([]);
			setQuery('');
			setSearchWasPerformed(false);

			NotificationStore.addNotification({
				type: 'success',
				title: '–ì–æ—Ç–æ–≤–æ',
				message: '–î–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.',
			});
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏:', error);
			NotificationStore.addNotification({
				type: 'error',
				title: '–û—à–∏–±–∫–∞',
				message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏',
			});
		} finally {
			// –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
			setImageLoading((prev) => ({...prev, [String(goalData.externalId)]: false}));
		}
	};

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	const getContentTypeName = (categoryEn: string): string => {
		const names: Record<string, string> = {
			books: '–∫–Ω–∏–≥–∏',
			'cinema-art': '—Ñ–∏–ª—å–º—ã',
			gaming: '–∏–≥—Ä—ã',
		};
		return names[categoryEn] || '–∫–æ–Ω—Ç–µ–Ω—Ç';
	};

	return (
		<div className={block()}>
			<h3 className={element('title')}>–ù–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Ü–µ–ª—å ({getContentTypeName(category)})</h3>
			<div className={element('search-panel')}>
				<div className={element('selectors')}>
					<Select
						className={element('complexity-select')}
						placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å"
						options={selectComplexity}
						activeOption={activeComplexity}
						onSelect={setActiveComplexity}
						text="–°–ª–æ–∂–Ω–æ—Å—Ç—å"
					/>
				</div>

				<div className={element('search-field')}>
					<FieldInput
						id="external-search"
						text="–ü–æ–∏—Å–∫"
						value={query}
						setValue={handleQueryChange}
						placeholder={`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ${getContentTypeName(category)}...`}
						iconBegin="search"
						className={element('search-input')}
						onKeyDown={(e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {
							if (e.key === 'Enter' && !isSearchButtonDisabled) {
								e.preventDefault();
								searchExternalGoals();
							}
						}}
					/>

					<Button
						theme="blue"
						icon="search"
						onClick={searchExternalGoals}
						size="medium"
						className={`${element('search-button')} ${isSearchButtonDisabled ? 'disabled' : ''}`}
					>
						{loading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
					</Button>
				</div>
			</div>

			<div className={element('results-container', {'is-empty': results.length === 0 && !loading})}>
				<Loader isLoading={loading}>
					{results.length > 0 && (
						<div className={element('results')}>
							{/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
							{(() => {
								const ownResults = results.filter((item) => item.isOwnDatabase);
								const externalResults = results.filter((item) => !item.isOwnDatabase);

								return (
									<>
										{ownResults.length > 0 && (
											<>
												<div className={element('section-header')}>
													<h4>
														–¶–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –≤–∞—à–∞ —Ü–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ—Å–∏–º –≤–∞—Å –≤—ã–±–∏—Ä–∞—Ç—å –µ—ë, –∞ –Ω–µ
														—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é)
													</h4>
												</div>
												{ownResults.map((item) => (
													<div
														className={element('result-item', {'own-database': true})}
														key={`own-${item.externalId}`}
													>
														<div className={element('result-image')}>
															{item.imageUrl ? (
																<img
																	src={item.imageUrl}
																	alt={item.title}
																	onLoad={() => handleImageLoad(String(item.externalId))}
																	onError={() => handleImageError(String(item.externalId))}
																/>
															) : (
																<div className={element('no-image')}>
																	<Svg icon="mount" />
																</div>
															)}
														</div>
														<div className={element('result-details')}>
															<h4 className={element('result-title')}>{item.title}</h4>
															{item.description && (
																<p className={element('result-description')}>
																	{item.description.substring(0, 150)}...
																</p>
															)}
															<div className={element('result-meta')}>
																<span className={element('match-percentage')}>
																	–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {item.matchPercentage || item.match_percentage}%
																</span>
															</div>
															<Button
																theme="green"
																onClick={() => handleSelectGoal(item)}
																className={`${element('add-button')} ${
																	imageLoading[String(item.externalId)] ? 'disabled' : ''
																}`}
																icon="plus"
															>
																{imageLoading[String(item.externalId)]
																	? '–ü—Ä–æ–≤–µ—Ä–∫–∞...'
																	: '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —Ü–µ–ª—å'}
															</Button>
														</div>
													</div>
												))}

												{externalResults.length > 0 && (
													<div className={element('section-divider')}>
														<hr />
														<span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</span>
														<hr />
													</div>
												)}
											</>
										)}

										{externalResults.map((item) => (
											<div className={element('result-item')} key={`external-${item.type}-${item.externalId}`}>
												<div className={element('result-image')}>
													{item.imageUrl ? (
														<img
															src={item.imageUrl}
															alt={item.title}
															onLoad={() => handleImageLoad(String(item.externalId))}
															onError={() => handleImageError(String(item.externalId))}
														/>
													) : (
														<div className={element('no-image')}>
															<Svg icon="mount" />
														</div>
													)}
												</div>
												<div className={element('result-details')}>
													<h4 className={element('result-title')}>{item.title}</h4>
													{item.description && (
														<p className={element('result-description')}>
															{item.description.substring(0, 150)}...
														</p>
													)}
													<div className={element('result-meta')}>
														{item.type === 'cinema-art' && item.releaseDate && (
															<span>–ì–æ–¥: {item.releaseDate.substring(0, 4)}</span>
														)}
														{item.type === 'book' && item.authors && (
															<span>–ê–≤—Ç–æ—Ä—ã: {item.authors.join(', ')}</span>
														)}
														{item.type === 'travel' && item.address && <span>–ê–¥—Ä–µ—Å: {item.address}</span>}
													</div>
													<Button
														theme="green"
														onClick={() => handleSelectGoal(item)}
														className={`${element('add-button')} ${
															imageLoading[String(item.externalId)] ? 'disabled' : ''
														}`}
														icon="plus"
													>
														{imageLoading[String(item.externalId)] ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —Ü–µ–ª—å'}
													</Button>
												</div>
											</div>
										))}
									</>
								);
							})()}
						</div>
					)}

					{results.length === 0 && searchWasPerformed && !loading && (
						<div className={element('no-results')}>
							<Svg icon="info" className={element('info-icon')} />
							<p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.</p>
						</div>
					)}
				</Loader>
			</div>
		</div>
	);
};
