import {observer} from 'mobx-react-lite';
import {FC, useCallback, useState} from 'react';

import {useBem} from '@/hooks/useBem';
import useScreenSize from '@/hooks/useScreenSize';
import {TodoStore} from '@/store/TodoStore';
import {TodoTask} from '@/typings/todo';

import {Button} from '../Button/Button';
import {MarkdownRenderer} from '../MarkdownRenderer/MarkdownRenderer';

import './todo-tasks-container.scss';

interface TodoTasksContainerProps {
	className?: string;
	tasks: TodoTask[];
	title?: string;
	onCreateTask: () => void;
	loading?: boolean;
}

export const TodoTasksContainer: FC<TodoTasksContainerProps> = observer(({className, tasks, title, onCreateTask, loading = false}) => {
	const [block, element] = useBem('todo-tasks-container', className);
	const {isScreenMobile} = useScreenSize();
	const [selectedTasks, setSelectedTasks] = useState<string[]>([]);
	const [taskProgress, setTaskProgress] = useState<{[key: string]: number}>({});

	const handleTaskToggle = async (taskId: string) => {
		try {
			await TodoStore.toggleTaskComplete(taskId);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
		}
	};

	const handleTaskDelete = async (taskId: string) => {
		if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
			try {
				await TodoStore.deleteTodoTask(taskId);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
			}
		}
	};

	const handleTaskDuplicate = async (taskId: string) => {
		try {
			await TodoStore.duplicateTodoTask(taskId);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
		}
	};

	const handleTaskSelect = (taskId: string) => {
		setSelectedTasks((prev) => (prev.includes(taskId) ? prev.filter((id) => id !== taskId) : [...prev, taskId]));
	};

	const handleBulkComplete = async () => {
		try {
			await TodoStore.bulkUpdateTasks({
				taskIds: selectedTasks,
				action: 'complete',
			});
			setSelectedTasks([]);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
		}
	};

	const handleBulkDelete = async () => {
		if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedTasks.length} –∑–∞–¥–∞—á?`)) {
			try {
				await TodoStore.bulkUpdateTasks({
					taskIds: selectedTasks,
					action: 'delete',
				});
				setSelectedTasks([]);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
			}
		}
	};

	const handleBulkAction = (action: string) => {
		if (selectedTasks.length === 0) return;

		switch (action) {
			case 'complete':
				handleBulkComplete();
				break;
			case 'delete':
				handleBulkDelete();
				break;
			default:
				break;
		}
	};

	const getPriorityColor = (priority: string) => {
		switch (priority) {
			case 'urgent':
				return '#ef4444';
			case 'high':
				return '#f97316';
			case 'medium':
				return '#3b82f6';
			case 'low':
				return '#10b981';
			default:
				return '#6b7280';
		}
	};

	const getPriorityLabel = (priority: string) => {
		switch (priority) {
			case 'urgent':
				return '–°—Ä–æ—á–Ω—ã–π';
			case 'high':
				return '–í—ã—Å–æ–∫–∏–π';
			case 'medium':
				return '–°—Ä–µ–¥–Ω–∏–π';
			case 'low':
				return '–ù–∏–∑–∫–∏–π';
			default:
				return priority;
		}
	};

	const getContextLabel = (context: string) => {
		switch (context) {
			case 'home':
				return '–î–æ–º';
			case 'work':
				return '–†–∞–±–æ—Ç–∞';
			case 'call':
				return '–ó–≤–æ–Ω–∫–∏';
			case 'email':
				return '–ü–æ—á—Ç–∞';
			case 'errands':
				return '–ü–æ—Ä—É—á–µ–Ω–∏—è';
			case 'computer':
				return '–ö–æ–º–ø—å—é—Ç–µ—Ä';
			case 'online':
				return '–û–Ω–ª–∞–π–Ω';
			case 'waiting':
				return '–û–∂–∏–¥–∞–Ω–∏–µ';
			case 'other':
				return '–î—Ä—É–≥–æ–µ';
			default:
				return context;
		}
	};

	const getRecurringLabel = (pattern: any) => {
		if (!pattern) return '';

		const {type, interval} = pattern;
		switch (type) {
			case 'daily':
				return interval === 1 ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : `–ö–∞–∂–¥—ã–µ ${interval} –¥–Ω—è`;
			case 'weekly':
				return interval === 1 ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' : `–ö–∞–∂–¥—ã–µ ${interval} –Ω–µ–¥–µ–ª–∏`;
			case 'monthly':
				return interval === 1 ? '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' : `–ö–∞–∂–¥—ã–µ ${interval} –º–µ—Å—è—Ü–∞`;
			case 'yearly':
				return interval === 1 ? '–ï–∂–µ–≥–æ–¥–Ω–æ' : `–ö–∞–∂–¥—ã–µ ${interval} –≥–æ–¥–∞`;
			default:
				return '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è';
		}
	};

	const handleProgressChange = useCallback((taskId: string, progress: number) => {
		setTaskProgress((prev) => ({
			...prev,
			[taskId]: progress,
		}));
	}, []);

	const getProgressDisplay = (progress: number) => {
		if (progress === 0) return null;
		if (progress === 100) return '‚úÖ';
		return `${progress}%`;
	};

	const getProgressColor = (progress: number) => {
		if (progress === 0) return 'transparent';
		if (progress < 50) return '#f97316'; // orange
		if (progress < 100) return '#3b82f6'; // blue
		return '#10b981'; // green
	};

	if (loading) {
		return (
			<div className={block()}>
				<div className={element('loading')}>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</div>
			</div>
		);
	}

	if (tasks.length === 0) {
		return (
			<div className={block()}>
				<div className={element('empty')}>
					<h3 className={element('empty-title')}>{title ? `–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–∑–¥–µ–ª–µ "${title}"` : '–í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á'}</h3>
					<p className={element('empty-text')}>–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π</p>
					<Button onClick={onCreateTask} theme="blue" size={isScreenMobile ? 'medium' : undefined}>
						+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
					</Button>
				</div>
			</div>
		);
	}

	return (
		<div className={block()}>
			<div className={element('header')}>
				<div className={element('header-info')}>
					<h2 className={element('title')}>{title || '–ó–∞–¥–∞—á–∏'}</h2>
					<span className={element('count')}>
						{tasks.length} –∑–∞–¥–∞—á{tasks.length === 1 ? '–∞' : tasks.length < 5 ? '–∏' : ''}
					</span>
				</div>

				{selectedTasks.length > 0 && (
					<div className={element('bulk-actions')}>
						<span className={element('selected-count')}>–í—ã–±—Ä–∞–Ω–æ: {selectedTasks.length}</span>
						<Button onClick={() => handleBulkAction('complete')} theme="green" size="small">
							–í—ã–ø–æ–ª–Ω–∏—Ç—å
						</Button>
						<Button onClick={() => handleBulkAction('delete')} theme="red" size="small">
							–£–¥–∞–ª–∏—Ç—å
						</Button>
					</div>
				)}
			</div>

			<div className={element('list')}>
				{tasks.map((task) => (
					<div
						key={task.id}
						className={element('task', {
							completed: task.isCompleted,
							overdue: task.isOverdue,
							selected: selectedTasks.includes(task.id),
						})}
					>
						<div className={element('task-main')}>
							<input
								type="checkbox"
								className={element('task-checkbox')}
								checked={selectedTasks.includes(task.id)}
								onChange={() => handleTaskSelect(task.id)}
							/>

							<button
								type="button"
								className={element('task-toggle', {completed: task.isCompleted})}
								onClick={() => handleTaskToggle(task.id)}
							>
								{task.isCompleted ? '‚úì' : '‚óã'}
							</button>

							<div className={element('task-content')}>
								<h3 className={element('task-title')}>{task.title}</h3>
								{task.description && (
									<div className={element('task-description')}>
										<MarkdownRenderer
											content={task.description}
											onProgressChange={(progress) => handleProgressChange(task.id, progress)}
										/>
									</div>
								)}

								<div className={element('task-meta')}>
									<span className={element('task-priority')} style={{backgroundColor: getPriorityColor(task.priority)}}>
										{getPriorityLabel(task.priority)}
									</span>

									{task.context && <span className={element('task-context')}>{getContextLabel(task.context)}</span>}

									{task.deadline && (
										<span className={element('task-deadline', {overdue: task.isOverdue})}>
											‚è∞{' '}
											{new Date(task.deadline).toLocaleString('ru-RU', {
												year: 'numeric',
												month: '2-digit',
												day: '2-digit',
												hour: '2-digit',
												minute: '2-digit',
											})}
										</span>
									)}

									{task.scheduledDate && (
										<span className={element('task-meeting')}>
											üìÖ{' '}
											{new Date(
												task.scheduledDate + (task.scheduledTime ? `T${task.scheduledTime}` : '')
											).toLocaleString('ru-RU', {
												year: 'numeric',
												month: '2-digit',
												day: '2-digit',
												...(task.scheduledTime && {
													hour: '2-digit',
													minute: '2-digit',
												}),
											})}
										</span>
									)}

									{task.isRecurring && task.recurringPattern && (
										<span className={element('task-recurring')}>üîÑ {getRecurringLabel(task.recurringPattern)}</span>
									)}

									{taskProgress[task.id] > 0 && (
										<span
											className={element('task-progress')}
											style={{backgroundColor: getProgressColor(taskProgress[task.id])}}
										>
											üìä {getProgressDisplay(taskProgress[task.id])}
										</span>
									)}

									{task.hasSubtasks && (
										<span className={element('task-subtasks')}>
											üìù {task.subtasksCompletedCount}/{task.subtasksTotalCount}
										</span>
									)}
								</div>

								{task.tags.length > 0 && (
									<div className={element('task-tags')}>
										{task.tags.map((tag) => (
											<span key={tag} className={element('task-tag')}>
												#{tag}
											</span>
										))}
									</div>
								)}
							</div>
						</div>

						<div className={element('task-actions')}>
							<button
								type="button"
								className={element('task-action')}
								onClick={() => handleTaskDuplicate(task.id)}
								title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"
							>
								üìã
							</button>
							<button
								type="button"
								className={element('task-action')}
								onClick={() => handleTaskDelete(task.id)}
								title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
							>
								üóëÔ∏è
							</button>
						</div>
					</div>
				))}
			</div>
		</div>
	);
});
