import {observer} from 'mobx-react-lite';
import {FC, useEffect} from 'react';

import {Button} from '@/components/Button/Button';
import {FriendCard} from '@/components/FriendCard/FriendCard';
import {useBem} from '@/hooks/useBem';
import {FriendsStore} from '@/store/FriendsStore';
import {NotificationStore} from '@/store/NotificationStore';
import {compareWithFriend, getFriends} from '@/utils/api/friends';

import './friends-content.scss';

export const FriendsContent: FC = observer(() => {
	const [block, element] = useBem('friends-content');

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–∑–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	useEffect(() => {
		const loadFriends = async () => {
			try {
				FriendsStore.setIsLoading(true);
				const response = await getFriends();

				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
				const formattedFriends = response.results.map((friend) => ({
					id: friend.id,
					username: friend.username,
					firstName: friend.firstName,
					lastName: friend.lastName,
					status: friend.status as 'accepted',
					createdAt: friend.createdAt,
					avatar: friend.avatar,
				}));

				FriendsStore.setFriends(formattedFriends);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', error);
				NotificationStore.addNotification({
					type: 'error',
					title: '–û—à–∏–±–∫–∞',
					message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π',
				});
			} finally {
				FriendsStore.setIsLoading(false);
			}
		};

		loadFriends();
	}, []);

	const handleCompareWithFriend = async (friendId: number) => {
		try {
			FriendsStore.setIsLoading(true);
			const comparison = await compareWithFriend(friendId);
			FriendsStore.setComparison(comparison);

			NotificationStore.addNotification({
				type: 'success',
				title: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ',
				message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
			});
		} catch (error) {
			NotificationStore.addNotification({
				type: 'error',
				title: '–û—à–∏–±–∫–∞',
				message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è',
			});
		} finally {
			FriendsStore.setIsLoading(false);
		}
	};

	if (FriendsStore.isLoading) {
		return (
			<section className={block()}>
				<div className={element('loading')}>
					<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
				</div>
			</section>
		);
	}

	return (
		<section className={block()}>
			<div className={element('header')}>
				<h1 className={element('title')}>–ú–æ–∏ –¥—Ä—É–∑—å—è ({FriendsStore.friendsCount})</h1>
				<p className={element('subtitle')}>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p>
			</div>

			{FriendsStore.isEmptyFriends ? (
				<div className={element('empty-state')}>
					<div className={element('empty-icon')}>üë•</div>
					<h3 className={element('empty-title')}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</h3>
					<p className={element('empty-text')}>–ù–∞–π–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bucket List –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –¥—Ä—É–∑—å—è</p>
					<Button theme="blue" type="Link" href="/user/self/friends/search">
						–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
					</Button>
				</div>
			) : (
				<div className={element('friends-list')}>
					{FriendsStore.friends.map((friend) => (
						<FriendCard key={friend.id} friend={friend} onCompare={handleCompareWithFriend} />
					))}
				</div>
			)}
		</section>
	);
});
